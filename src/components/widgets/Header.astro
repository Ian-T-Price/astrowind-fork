---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { getAsset } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  target?: string;
  links?: Array<Link>;
}

type ClassList = string | string[] | Record<string, boolean> | (string | Record<string, boolean> | string[])[];

interface ActionLink extends Omit<Link, 'links'> {
  variant?: 'primary' | 'secondary' | 'tertiary' | 'link';
  classes?: Record<string, string>;
  type?: 'button' | 'submit' | 'reset';
  'class:list'?: ClassList;
}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 md:px-6 mx-auto w-full md:flex md:justify-between',
      {
        'max-w-7xl': position === 'center',
        'mr-auto': position === 'right',
        'ml-auto': position === 'left',
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:mx-5"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium"
      >
        {
          links.map(({ text, href, links, ariaLabel }) => (
            <li class={links?.length ? 'dropdown' : ''} data-href={href}>
              {links?.length ? (
                <>
                  <button
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center"
                    aria-label={ariaLabel ?? text}
                    data-parent-href={href}
                  >
                    {text}{' '}
                    {links?.length && (
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                      />
                    )}
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:md:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={['hover:text-link dark:hover:text-white px-4 py-3 flex items-center']}
                  href={href}
                  aria-label={ariaLabel ?? text}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:flex md:self-center items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => {
                // Extract class:list and pass the rest of the props to Button
                const { 'class:list': classList, ...otherProps } = btnProps;
                return <Button {...otherProps} class:list={classList} />;
              })}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

<script>
  // Handle header opacity on scroll
  function setupHeaderScroll() {
    const header = document.querySelector('header');

    if (!header) return;

    // Classes to add when scrolled
    const scrolledClasses = ['bg-white/90', 'dark:bg-slate-900/90', 'backdrop-blur-sm', 'shadow-md'];

    // Function to update header based on scroll position
    const updateHeaderClass = () => {
      if (window.scrollY > 10) {
        // Add classes when scrolled down
        scrolledClasses.forEach((cls) => header.classList.add(cls));
      } else {
        // Remove classes when at top
        scrolledClasses.forEach((cls) => header.classList.remove(cls));
      }
    };

    // Run once on load
    updateHeaderClass();

    // Add scroll listener
    window.addEventListener('scroll', updateHeaderClass, { passive: true });
  }

  // Handle dropdown menus with clickable parent
  function setupDropdowns() {
    const dropdownButtons = document.querySelectorAll<HTMLButtonElement>('.dropdown button');

    dropdownButtons.forEach((button) => {
      // Use non-null assertion with type guard
      const dropdown = button.closest('.dropdown');
      if (!dropdown) return;

      const menu = dropdown.querySelector<HTMLUListElement>('.dropdown-menu');
      if (!menu) return;

      const parentHref = button.getAttribute('data-parent-href');

      let isOpen = false;

      // Toggle function
      const toggleDropdown = () => {
        isOpen = !isOpen;
        if (isOpen) {
          menu.classList.remove('md:hidden');
        } else {
          menu.classList.add('md:hidden');
        }
      };

      // Handle clicks on the button
      button.addEventListener('click', (e) => {
        const target = e.target as Node;
        // For desktop view
        if (window.innerWidth >= 768) {
          const icon = button.querySelector<HTMLElement>('svg') || button.querySelector<HTMLElement>('i');

          // If clicked on the icon, toggle the dropdown
          if (icon && icon.contains(target)) {
            e.preventDefault();
            toggleDropdown();
          }
          // If clicked on the text part, navigate
          else if (parentHref) {
            window.location.href = parentHref;
          }
        } else {
          // On mobile, always toggle the dropdown
          e.preventDefault();
          toggleDropdown();
        }
      });

      // Close on click outside
      document.addEventListener('click', (e) => {
        const target = e.target as Node;
        if (isOpen && !dropdown.contains(target)) {
          isOpen = false;
          menu.classList.add('md:hidden');
        }
      });
    });
  }

  // Run both functions on page load
  function initializeAll() {
    setupDropdowns();
    setupHeaderScroll();
  }

  // Run on page load
  document.addEventListener('DOMContentLoaded', initializeAll);

  // For Astro view transitions
  document.addEventListener('astro:page-load', initializeAll);
</script>
